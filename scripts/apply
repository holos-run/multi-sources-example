#! /bin/bash

# cd to the repository root
TOPLEVEL="$(cd $(dirname "$0") && git rev-parse --show-toplevel)"
cd "$TOPLEVEL"

set -xeuo pipefail

apply() {
  kubectl apply --force-conflicts --server-side=true -f "deploy/components/${1}/${1}.gen.yaml"
}

kapply() {
  kubectl apply --force-conflicts --server-side=true -f "scripts/manifests/${1}"
}

# Namespaces first
kapply 1-namespaces
apply namespaces
# ExternalSecrets needed to generate random passwords in-cluster.
kapply 2-external-secrets
# Need GatewayAPI for ReferenceGrant
kapply 3-gateway-api
# Expose https://argocd.holos.localhost with a valid cert
kapply 4-cert-manager
# Wait for cert manager to be available so we can manage the cluster issuer
kubectl wait --for=condition=Available deployment/cert-manager-webhook -n cert-manager --timeout=300s
# Manage the ingress gateway
kapply 5-gateway
kapply 6-httproutes
# Wait for External Secrets to come online
kubectl wait --for=condition=Available deployment/external-secrets-webhook -n external-secrets --timeout=300s
# Generate argocd passwords in-cluster.
kapply 7-argocd-secrets
# Deploy ArgoCD to manage Application resources.
kapply 8-argocd
# Apply the Application resources
kubectl apply --force-conflicts --server-side=true -f "deploy/gitops"
# Wait for ArgoCD to be ready
kubectl wait --for=condition=Available deployment/argocd-server -n argocd --timeout=300s

set +x
echo
echo "Done! Browse to https://argocd.holos.localhost"

exit 0
